name: Build & Deploy Flappy Capy

on:
  push:
    branches: [ main ]   # change to master if your default branch is master

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pygbag (latest from GitHub)
        run: |
          python -m pip install --upgrade pip
          python -m pip install "git+https://github.com/pygame-web/pygbag.git"

      - name: Set up Emscripten (emsdk)
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: latest

      # Force pygbag to build for the web (not APK) & avoid config parser issue
      - name: Create pygbag.ini
        run: |
          cat > pygbag.ini <<'EOF'
          [project]
          name = capi
          source = .
          entry = main.py
          backend = pygame
          platform = web

          [DEPENDENCIES]
          ignorefiles =
          ignoredirs  =
          EOF

      - name: Ensure build dir exists
        run: mkdir -p build/web

      # Start pygbag, wait for .wasm to appear, then stop server
      - name: Build with pygbag (timeout + wait for files)
        run: |
          set -e
          python -m pygbag main.py & PID=$!

          # wait up to ~3 minutes for the web bundle to appear
          for i in $(seq 1 90); do
            if [ -f build/web/index.html ] && ls build/web/*.wasm >/dev/null 2>&1; then
              echo "✅ Web build detected."
              break
            fi
            echo "⏳ Waiting for build... ($i/90)"
            sleep 2
          done

          # stop the background server if still running
          kill $PID || true

          echo "Contents of build/web:"
          ls -la build/web || (echo "❌ build/web missing" && exit 1)

      # Optional: auto-start patch to skip green overlay on mobile
      - name: Auto-start patch (skip green overlay)
        run: |
          if [ -f build/web/index.html ]; then
            cat >> build/web/index.html <<'PATCH'
            <script>
            window.addEventListener("load", () => {
              const clickRun = () => {
                const btn = document.getElementById("run") || document.querySelector(".run, #start, .start, button");
                if (btn) try { btn.click(); } catch(e) {}
              };
              clickRun(); setTimeout(clickRun, 150); setTimeout(clickRun, 300);
            });
            </script>
            PATCH
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/web

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
